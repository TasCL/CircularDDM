// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dinvGauss
arma::vec dinvGauss(arma::vec x, double mu, double lambda);
RcppExport SEXP CircularDDM_dinvGauss(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvGauss(x, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rvm
arma::vec rvm(int n, double mu, double k);
RcppExport SEXP CircularDDM_rvm(SEXP nSEXP, SEXP muSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rvm(n, mu, k));
    return rcpp_result_gen;
END_RCPP
}
// besselzero
arma::vec besselzero(double nu, int k, int kind);
RcppExport SEXP CircularDDM_besselzero(SEXP nuSEXP, SEXP kSEXP, SEXP kindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type kind(kindSEXP);
    rcpp_result_gen = Rcpp::wrap(besselzero(nu, k, kind));
    return rcpp_result_gen;
END_RCPP
}
// logLik_resp
arma::vec logLik_resp(arma::mat x, arma::vec pVec);
RcppExport SEXP CircularDDM_logLik_resp(SEXP xSEXP, SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_resp(x, pVec));
    return rcpp_result_gen;
END_RCPP
}
// logLik_dt
arma::vec logLik_dt(arma::mat x, arma::vec pVec, int k);
RcppExport SEXP CircularDDM_logLik_dt(SEXP xSEXP, SEXP pVecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_dt(x, pVec, k));
    return rcpp_result_gen;
END_RCPP
}
// dddm
arma::vec dddm(arma::mat x, arma::vec pVec, int k);
RcppExport SEXP CircularDDM_dddm(SEXP xSEXP, SEXP pVecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(dddm(x, pVec, k));
    return rcpp_result_gen;
END_RCPP
}
// rddm
arma::mat rddm(int n, arma::vec pVec, double p);
RcppExport SEXP CircularDDM_rddm(SEXP nSEXP, SEXP pVecSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rddm(n, pVec, p));
    return rcpp_result_gen;
END_RCPP
}
